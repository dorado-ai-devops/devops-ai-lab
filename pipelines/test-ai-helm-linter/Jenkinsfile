pipeline {
  agent any

  environment {
    OPENAI_API_KEY = credentials('OPENAI_API_KEY')
  }

  parameters {
    choice(
      name: 'MODELO_IA',
      choices: ['openai', 'ollama'],
      description: 'Selecciona el motor de IA para linting de Helm Charts'
    )
  }

  stages {
    stage('Verificar Helm') {
      steps {
        sh 'helm version || (echo "Helm no estÃ¡ disponible en esta imagen." && exit 1)'
      }
    }

    stage('Descargar y empaquetar Helm Chart') {
      steps {
        script {
          def repoUrl = "git@github.com:dorado-ai-devops/devops-ai-lab.git"
          def repoDir = "devops-ai-lab"
          def chartSubpath = "manifests/helm-log-analyzer"
          def chartDest = "packaged_chart"

          sshagent(['doradodaniaissh']) {
            sh """
              if [ ! -d "${repoDir}" ]; then
                git clone ${repoUrl}
              fi
            """
          }

          sh "mkdir -p ${chartDest}"
          def chartTgz = sh(
            script: "helm package ${repoDir}/${chartSubpath} --destination ${chartDest} | awk '{print \$NF}'",
            returnStdout: true
          ).trim()

          echo "Chart empaquetado en: ${chartTgz}"

          if (!fileExists(chartTgz)) {
            error "No se generÃ³ el paquete Helm correctamente: ${chartTgz}"
          }

          writeFile file: 'chart-path.txt', text: chartTgz
        }
      }
    }

    stage('Lint con IA') {
      steps {
        script {
          def chartTgz = readFile('chart-path.txt').trim()

          if (!fileExists(chartTgz)) {
            error "Archivo de chart no encontrado: ${chartTgz}"
          }

          def authHeader = (params.MODELO_IA == 'openai') ? "-H 'Authorization: Bearer ${OPENAI_API_KEY}'" : ""

          def response = sh(
            script: """
              curl -s -X POST http://helm-linter-service.devops-ai.svc.cluster.local:80/lint-chart \
                -F chart=@${chartTgz} \
                -F mode=${params.MODELO_IA} \
                ${authHeader}
            """,
            returnStdout: true
          ).trim()

          echo "ðŸ“¡ Respuesta del Helm Linter IA (${params.MODELO_IA}):"
          echo response
        }
      }
    }
  }

  post {
    always {
      echo 'Limpiando artefactos temporales...'
      sh 'rm -rf packaged_chart chart-path.txt'
    }
  }
}
